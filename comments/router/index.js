import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'

// * 4.0 Когда мы работаем над созданием веб-приложений стоит всегда думать о скорости загрузки приложения пользователями, особенно теми, у кого низкая скорость интернета. Если у нас громоздкое приложение с кучей экранов и компонентов, то нам нужно сделать так, чтобы для того, чтобы увидеть первую страницу, пользователям не приходилось скачивать всё сразу. С этим очень помогает техника разделения кода («code splitting»). Это техника разделения кода на множество разных файлов «bundles/chunks» и браузер должен загружать только тот файл с кодом, который требуется для корректного отображения конкретной страницу, на которую пользователь направляется.
// 4.1 Итак, когда пользователь попадает на главную "домашнюю" страницу, то вместо того, чтобы скачивать все компоненты он загрузит HomeView компонент и то, что ему требуется для отображения и корректной работы (это называется зависимостями, т.к. компонент зависит от них). Это колоссально увеличивает скорость загрузки приложения и сейчас этот подход уже давно стал стандартом.
// 4.2 Рассмотрим бегло как это работает, начиная с этого файла Вью-раутера. Мы видим, что компонент HomeView загружается сразу, т.к. он обязателен всем, кто заходит на главный домен сайта, т.е. на его стартовую страницу. В тоже время страница "about" загружает свой кусок кода динамически, но только, когда пользователь пожелает на неё зайти и не раньше. Делается это при помощи промиса стрелочной функцией, вместо того, чтобы напрямую присвоить компонент в опцию "component", как HomeView.
// Go to [src\components\HelloWorld.vue]

const routes = [
  {
    path: '/',
    name: 'home',
    component: HomeView
  },
  {
    path: '/about',
    name: 'about',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/AboutView.vue')
  }
]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
})

export default router
